[
  // No context bindings have the highest precedence.  See https://zed.dev/docs/key-bindings#precedence

  // For macOS Emacs keybindings, see also https://github.com/zed-industries/zed/blob/main/assets/keymaps/macos/emacs.json

  // Unbind ctrl-g everywhere.
  // I'm used to hitting it repeatedly in Emacs to cancel things and I expect it to do that consistently everywhere.
  // Unfortutately zed defaults ctrl-g to go to line which I rarely use. Extra unfortunately, this has been difficult to
  // accomplish and I had to bind various things to ctrl-g in various contexts via trial and error to get it to do what
  // I want it to do. I'm sure this is brittle and it certainly is horrible, but it was all that I could come up with
  // right now. The best way to see all the places that I had to muck with this is to search for "ctrl-g". I did bind go
  // to line to "cmd-g cmd-g" like I have in Emacs.
  { "use_key_equivalents": true, "bindings": { "ctrl-g": null } },
  { "context": "GoToLine > Editor", "use_key_equivalents": true, "bindings": { "ctrl-g": "menu::Cancel" } },
  { "context": "Picker > Editor", "use_key_equivalents": true, "bindings": { "ctrl-g": "menu::Cancel" } },
  {
    "context": "BufferSearchBar > Editor",
    "use_key_equivalents": true,
    "bindings": { "ctrl-g": "buffer_search::Dismiss" }
  },
  { "context": "Pane > Editor", "use_key_equivalents": true, "bindings": { "ctrl-g": "editor::Cancel" } },
  { "context": "PromptEditor > Editor", "use_key_equivalents": true, "bindings": { "ctrl-g": "editor::Cancel" } },
  { "context": "TabSwitcher > Picker", "use_key_equivalents": true, "bindings": { "ctrl-g": "menu::Cancel" } },
  { "context": "Workspace", "use_key_equivalents": true, "bindings": { "ctrl-g": "menu::Cancel" } },

  // Debug Key Context View
  {
    "context": "Pane > KeyContextView",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-x": "command_palette::Toggle",
      "q": "pane::CloseActiveItem"
    }
  },

  // Workspace
  {
    "context": "Workspace",
    "use_key_equivalents": true,
    "bindings": {
      // Commands
      "cmd-x": "command_palette::Toggle",
      "ctrl-x ctrl-f": ["task::Spawn", { "task_name": "File Finder", "reveal_target": "center" }],

      // Focus
      "cmd-space": "workspace::ActivateNextPane",
      "cmd-shift-space": "workspace::ActivatePreviousPane",

      // Pane pain
      "ctrl-x 0": "pane::CloseAllItems",
      "ctrl-x 1": ["workspace::SendKeystrokes", "cmd-space ctrl-x 0"]
    }
  },

  // Pane
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-x ctrl-a": "pane::DeploySearch"
    }
  },

  // Buffer Search
  {
    "context": "BufferSearchBar > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-n": "search::SelectNextMatch",
      "ctrl-p": "search::SelectPreviousMatch",
      "enter": "editor::Cancel"
    }
  },

  // Editor
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      // Movement
      "cmd-m": ["editor::MoveToBeginningOfLine", { "stop_at_indent": true }],
      "cmd-b": "editor::MoveToPreviousWordStart",
      "cmd-f": "editor::MoveToNextWordEnd",
      "cmd-a": "editor::MoveToStartOfParagraph",
      "cmd-e": "editor::MoveToEndOfParagraph",
      "cmd-<": "editor::MoveToBeginning",
      "cmd->": "editor::MoveToEnd",
      "cmd-ctrl-b": "editor::MoveToEnclosingBracket",
      "cmd-ctrl-f": "editor::MoveToEnclosingBracket",
      "ctrl-v": ["editor::MovePageDown", { "center_cursor": true }],
      "cmd-v": ["editor::MovePageUp", { "center_cursor": true }],
      "cmd-g cmd-g": "go_to_line::Toggle",
      "cmd-.": "outline::Toggle",

      // Selection
      "cmd-ctrl-space": "editor::SelectLargerSyntaxNode",
      "cmd-ctrl-enter": "editor::SelectAllMatches",
      "cmd-ctrl-,": "editor::AddSelectionAbove", // See Editor && selection_mode context: editor::SelectPrevious
      "cmd-ctrl-.": "editor::AddSelectionBelow", // See Editor && selection_mode context: editor::SelectNext

      // Cut/Copy/Paste
      // TODO editor::KillRingCut & editor::KillRingYank when zed groks how a kill ring actually works.
      "cmd-w": ["workspace::SendKeystrokes", "cmd-c ctrl-g"], // Emacs transient mark mode deactivates mark after copy
      "ctrl-k": "editor::CutToEndOfLine",
      "ctrl-w": "editor::Cut",
      "ctrl-y": "editor::Paste",

      // Delete
      "cmd-d": "editor::DeleteToNextWordEnd",
      "cmd-h": "editor::DeleteToPreviousWordStart",
      "ctrl-shift-h": "editor::DeleteLine",

      // Insert
      "ctrl-m": "editor::Newline",
      "cmd-;": "editor::ToggleComments",

      // Mutate
      "ctrl-j": ["workspace::SendKeystrokes", "ctrl-p ctrl-j"], // Mimic Emacs join-line behavior
      "cmd-q": "editor::Rewrap", // Emacs fill-paragraph
      "ctrl-t": "editor::Transpose",
      "ctrl-x ctrl-t": "editor::MoveLineUp", // Approximate Emacs transpose-lines

      // Undo/Redo
      "ctrl-/": "editor::Undo",
      "ctrl-?": "editor::Redo",

      // Commands
      "ctrl-,": "editor::ToggleCodeActions",
      "ctrl-.": "editor::ShowCompletions",
      "ctrl-i": "editor::Hover",
      "cmd-x": "command_palette::Toggle",
      "ctrl-x ctrl-f": ["task::Spawn", { "task_name": "File Finder", "reveal_target": "center" }],
      "ctrl-x ctrl-r": "file_finder::Toggle"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-n": "editor::ContextMenuNext",
      "ctrl-p": "editor::ContextMenuPrevious"
    }
  },

  // Editor when selection is active
  {
    "context": "Editor && selection_mode",
    "use_key_equivalents": true,
    "bindings": {
      // Selection
      "cmd-ctrl-,": "editor::SelectPrevious", // See Editor context: editor::AddSelectionAbove
      "cmd-ctrl-.": "editor::SelectNext" // See Editor context: editor::AddSelectionBelow
    }
  },

  // Editor when a prediction is being shown inline
  {
    "context": "Editor && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      // "tab": "editor::Tab", // Let tab be tab for god's sake,
      // "ctrl-space": "editor::AcceptEditPrediction" // I'll be explicit when I want the prediction
    }
  }
]
